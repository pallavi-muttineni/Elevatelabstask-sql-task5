CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100)
);

-- Insert data into Customers Table
INSERT INTO Customers (CustomerID, Name, Email) VALUES
(1, 'Alice', 'alice@example.com'),
(2, 'Bob', 'bob@example.com'),
(3, 'Charlie', 'charlie@example.com'),
(4, 'David', 'david@example.com');

-- Create Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    Amount DECIMAL(10, 2)
);

-- Insert data into Orders Table
INSERT INTO Orders (OrderID, CustomerID, OrderDate, Amount) VALUES
(101, 1, '2023-01-15', 150.00),
(102, 2, '2023-01-20', 200.00),
(103, 1, '2023-02-01', 75.00),
(104, 3, '2023-02-10', 300.00),
(105, 5, '2023-03-05', 120.00);

-- Step 2: Explore Join Types

-- 1. INNER JOIN
-- Returns only the rows that have matching values in both tables.
SELECT
    C.CustomerID,
    C.Name,
    C.Email,
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Customers AS C
INNER JOIN
    Orders AS O ON C.CustomerID = O.CustomerID;

-- 2. LEFT JOIN (or LEFT OUTER JOIN)
-- Returns all rows from the left table, and the matching rows from the right table.
-- If no match in the right table, NULL values are returned for the right table's columns.
SELECT
    C.CustomerID,
    C.Name,
    C.Email,
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Customers AS C
LEFT JOIN
    Orders AS O ON C.CustomerID = O.CustomerID;

-- 3. RIGHT JOIN (or RIGHT OUTER JOIN)
-- Returns all rows from the right table, and the matching rows from the left table.
-- If no match in the left table, NULL values are returned for the left table's columns.

-- For MySQL/PostgreSQL/SQL Server:
SELECT
    C.CustomerID,
    C.Name,
    C.Email,
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Customers AS C
RIGHT JOIN
    Orders AS O ON C.CustomerID = O.CustomerID;

-- Equivalent for SQLite (swap tables and use LEFT JOIN):
-- SELECT
--     C.CustomerID,
-- --     C.Name,
-- --     C.Email,
--     O.OrderID,
--     O.OrderDate,
--     O.Amount
-- FROM
--     Orders AS O
-- LEFT JOIN
--     Customers AS C ON C.CustomerID = O.CustomerID;

-- 4. FULL JOIN (or FULL OUTER JOIN)
-- Returns all rows when there is a match in one of the tables.
-- Combines the results of both LEFT JOIN and RIGHT JOIN.
-- If no match, NULL values are returned for the columns of the table that doesn't have a match.

-- For MySQL/PostgreSQL/SQL Server:
SELECT
    C.CustomerID,
    C.Name,
    C.Email,
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Customers AS C
FULL OUTER JOIN
    Orders AS O ON C.CustomerID = O.CustomerID;

-- Equivalent for SQLite (using UNION ALL to simulate FULL JOIN):
SELECT
    C.CustomerID,
    C.Name,
    C.Email,
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Customers AS C
LEFT JOIN
    Orders AS O ON C.CustomerID = O.CustomerID

UNION ALL

SELECT
    C.CustomerID, -- This will be NULL for unmatched orders
    C.Name,       -- This will be NULL for unmatched orders
    C.Email,      -- This will be NULL for unmatched orders
    O.OrderID,
    O.OrderDate,
    O.Amount
FROM
    Orders AS O
LEFT JOIN
    Customers AS C ON C.CustomerID = O.CustomerID
WHERE
    C.CustomerID IS NULL; -- Only include rows from Orders that had no match in Customers
